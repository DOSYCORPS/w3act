# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# The home page
GET     /                                   controllers.About.index()

# Authentication
GET     /login                              controllers.Application.login()
POST    /login                              controllers.Application.authenticate()
GET     /logout                             controllers.Application.logout()

# Javascript routing
GET     /assets/javascripts/routes          controllers.Application.javascriptRoutes()

# Map static resources from the /public folder to the /public path
GET     /assets/*file                       controllers.Assets.at(path="/public", file)

# Licence form
GET     /ukwa/licence                       controllers.LicenceController.index()
POST    /ukwa/licence/submit                controllers.LicenceController.submit()
GET     /ukwa/licence/result                controllers.LicenceController.result()
GET     /ukwa/licenceform/:url              controllers.LicenceController.form(url)
GET     /ukwa/licenceformview/:url          controllers.LicenceController.formview(url)

# Tabs
GET     /collections                        controllers.DCollections.index()
GET    	/collections/list                  	controllers.DCollections.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")

GET     /organisations                      controllers.Organisations.index()
GET     /organisations/list                 controllers.Organisations.list(p:Int ?= 0, s ?= "name", o ?= "asc", q ?= "")
GET     /organisations/search               controllers.Organisations.search()
GET     /organisations/new/:title      		controllers.Organisations.create(title)
GET     /organisationsedit/:url     			controllers.Organisations.edit(url)
POST    /organisations                 		controllers.Organisations.save()
GET    	/organisations/filterbyjson/:title	controllers.Organisations.filterByJson(title)
GET     /organisations/:url        			controllers.Organisations.view(url)

GET     /curators                           controllers.Curators.index()
GET     /curators/list                      controllers.Curators.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /curators/search               		controllers.Curators.search()
GET     /curators/new/:title      			controllers.Curators.create(title)
GET    	/curators/filterbyjson/:name		controllers.Curators.filterByJson(name)
GET     /curators/:url        				controllers.Curators.view(url)
GET     /curators/:user/edit                controllers.Curators.edit(user)
GET     /curators/:usersites               	controllers.Curators.sites(usersites)
GET     /curators/:userbookmarks       		controllers.Curators.bookmarks(userbookmarks)

GET     /roles                              controllers.RoleEdit.index()
GET     /roles/list							controllers.RoleEdit.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /permissions                        controllers.PermissionEdit.index()
GET     /permissions/list					controllers.PermissionEdit.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /crawlpermissions                   controllers.CrawlPermissionEdit.index()
GET     /contact                            controllers.Contact.index()

# Navigation
GET     /addcontent                         controllers.AddContent.index()
GET     /findcontent                        controllers.FindContent.index()
GET     /article                            controllers.Article.index()
GET     /articlepreview                     controllers.Article.preview()
GET     /basicpage                          controllers.BasicPage.index()
GET     /organisationform                   controllers.OrganisationForm.index()
GET     /specialcollection                  controllers.SpecialCollection.index()
GET     /website                            controllers.WebSite.index()
GET     /websites                           controllers.WebSites.index()
GET     /alphabeticalindex                  controllers.AlphabeticalIndex.index()
GET     /duplicateurls                      controllers.DuplicateUrls.index()
GET     /keysites                           controllers.KeySites.index()
GET     /dispensationsites                  controllers.DispensationSites.index()
GET     /urlsearch                          controllers.UrlSearch.index()
GET     /urlsnocrawl                        controllers.UrlsNoCrawl.index()
GET     /taxonomies                         controllers.EditTaxonomies.index()
GET     /bookmarks                          controllers.Bookmarks.index()
GET     /tips                               controllers.Tips.index()

# Domain objects


GET     /organisationsites/:sites           controllers.OrganisationEdit.sites(sites)
GET     /organisationadmin/:organisation    controllers.OrganisationEdit.admin(organisation)

GET     /collection/:collection             controllers.CollectionEdit.view(collection)
GET     /collectionedit/:collection         controllers.CollectionEdit.edit(collection)
GET     /collectionsites/:sites             controllers.CollectionEdit.sites(sites)
GET     /collectionadd/:collection          controllers.CollectionEdit.addEntry(collection)
POST    /collection/filter/                 controllers.CollectionEdit.filter()
GET    	/collection/filterbyjson/:name		controllers.CollectionEdit.filterByJson(name)

GET     /taxonomy/:taxonomy                 controllers.TaxonomyEdit.view(taxonomy)
GET     /taxonomyedit/:taxonomy             controllers.TaxonomyEdit.edit(taxonomy)

GET     /target/:target                     controllers.TargetEdit.view(target)
GET     /targetrevision/:revision           controllers.TargetEdit.viewrevision(revision:Long)
GET     /targetedit/:target                 controllers.TargetEdit.edit(target)
GET     /targets/:curatorUrl/:organisationUrl/:collectionCategoryUrl/:subjectUrl/:crawlFrequency/:depth/:scope/:offset/:limit/:license/:sorted/       controllers.Targets.edit(curatorUrl, organisationUrl, collectionCategoryUrl, subjectUrl, crawlFrequency, depth, scope, offset:Int, limit:Int, license, sorted:Boolean)
GET     /target/crawlpermissions/:target    controllers.CrawlPermissionEdit.showCrawlPermissions(target)
GET     /target/licencerequest/:name/:target  controllers.CrawlPermissionEdit.licenceRequestForTarget(name, target)

GET     /role/:role                         controllers.RoleEdit.view(role)
GET     /roleedit/:role                     controllers.RoleEdit.edit(role)
GET     /roleadd/:role                      controllers.RoleEdit.addEntry(role)
GET     /roleadmin/:role                    controllers.RoleEdit.admin(role)
POST    /role/filter/                       controllers.RoleEdit.filter()
GET    	/role/filterbyjson/:name			controllers.RoleEdit.filterByJson(name)

GET     /permission/:permission             controllers.PermissionEdit.view(permission)
GET     /permissionedit/:permission         controllers.PermissionEdit.edit(permission)
GET     /permissionadd/:permission          controllers.PermissionEdit.addEntry(permission)
POST    /permission/filter/                 controllers.PermissionEdit.filter()
GET    	/permission/filterbyjson/:name		controllers.PermissionEdit.filterByJson(name)

GET     /crawlpermission/:permission        controllers.CrawlPermissionEdit.view(permission)
GET     /crawlpermissionedit/:permission    controllers.CrawlPermissionEdit.edit(permission)
GET     /crawlpermissionadd/:permission     controllers.CrawlPermissionEdit.addEntry(permission)
POST    /crawlpermission/filter/            controllers.CrawlPermissionEdit.filter()
GET    	/crawlpermission/filterbyjson/:name	controllers.CrawlPermissionEdit.filterByJson(name)
GET    	/crawlpermission/templates/     	controllers.CrawlPermissionEdit.templates()
GET    	/crawlpermission/contacttemplates/    controllers.CrawlPermissionEdit.contactpersons()
POST    /crawlpermission/send/              controllers.CrawlPermissionEdit.send()
GET    	/crawlpermission/licences/        	controllers.CrawlPermissionEdit.licences()
GET    	/crawlpermission/refusals/        	controllers.CrawlPermissionEdit.refusals()
GET    	/crawlpermission/communicationlogs/    	controllers.CrawlPermissionEdit.communicationLogs()

GET     /contactperson                      controllers.ContactPersonEdit.index()
GET     /contactperson/:person              controllers.ContactPersonEdit.view(person)
GET     /contactpersonedit/:person          controllers.ContactPersonEdit.edit(person)
GET     /contactpersonadd/:person           controllers.ContactPersonEdit.addEntry(person)
POST    /contactperson/filter/              controllers.ContactPersonEdit.filter()
GET    	/contactperson/filterbyjson/:name	controllers.ContactPersonEdit.filterByJson(name)
POST    /contactperson/save                 controllers.ContactPersonEdit.save()

GET     /mailtemplate                       controllers.MailTemplateEdit.index()
GET     /mailtemplate/:template             controllers.MailTemplateEdit.view(template)
GET     /mailtemplateedit/:template         controllers.MailTemplateEdit.edit(template)
GET     /mailtemplateadd/:template          controllers.MailTemplateEdit.addEntry(template)
POST    /mailtemplate/filter/               controllers.MailTemplateEdit.filter()
GET    	/mailtemplate/filterbyjson/:name	controllers.MailTemplateEdit.filterByJson(name)
POST    /mailtemplate/save                  controllers.MailTemplateEdit.save()

GET     /licence                            controllers.LicenceEdit.index()
POST    /licence/filter/                    controllers.LicenceEdit.filter()
GET    	/licence/filterbyjson/:name	        controllers.LicenceEdit.filterByJson(name)

GET     /refusal                            controllers.PermissionRefusalEdit.index()
GET     /refusal/:refusal                   controllers.PermissionRefusalEdit.view(refusal)
GET     /refusaledit/:refusal               controllers.PermissionRefusalEdit.edit(refusal)
GET     /refusaladd/:refusal                controllers.PermissionRefusalEdit.addEntry(refusal)
POST    /refusal/filter/                    controllers.PermissionRefusalEdit.filter()
GET    	/refusal/filterbyjson/:name	        controllers.PermissionRefusalEdit.filterByJson(name)
POST    /refusal/save                       controllers.PermissionRefusalEdit.save()

GET     /tag                                controllers.TagEdit.index()
GET     /tag/:tag                           controllers.TagEdit.view(tag)
GET     /tagedit/:tag                       controllers.TagEdit.edit(tag)
GET     /tagadd/:tag                        controllers.TagEdit.addEntry(tag)
POST    /tag/filter/                        controllers.TagEdit.filter()
GET    	/tag/filterbyjson/:name	            controllers.TagEdit.filterByJson(name)
POST    /tag/save                           controllers.TagEdit.save()

GET     /flag                               controllers.FlagEdit.index()
GET     /flag/:flag                         controllers.FlagEdit.view(flag)
GET     /flagedit/:flag                     controllers.FlagEdit.edit(flag)
GET     /flagadd/:flag                      controllers.FlagEdit.addEntry(flag)
POST    /flag/filter/                       controllers.FlagEdit.filter()
GET    	/flag/filterbyjson/:name	        controllers.FlagEdit.filterByJson(name)
POST    /flag/save                          controllers.FlagEdit.save()

GET     /communicationlog                   controllers.CommunicationLogEdit.index()
GET     /communicationlog/:log              controllers.CommunicationLogEdit.view(log)
GET     /communicationlogedit/:log          controllers.CommunicationLogEdit.edit(log)
GET     /communicationlogadd/:log           controllers.CommunicationLogEdit.addEntry(log)
POST    /communicationlog/filter/           controllers.CommunicationLogEdit.filter()
GET    	/communicationlog/filterbyjson/:name  controllers.CommunicationLogEdit.filterByJson(name)
POST    /communicationlog/save              controllers.CommunicationLogEdit.save()
GET     /communicationlog/link/:permission       controllers.CommunicationLogEdit.showLogs(permission)


# Forms
POST    /article/add-article                controllers.Article.addArticle()
POST    /target/save-target                 controllers.TargetController.saveTarget()
POST    /user/save-user                     controllers.Curators.saveUser()
POST    /collection/save                    controllers.DCollections.save()
POST    /role/save                          controllers.RoleEdit.save()
POST    /permission/save                    controllers.PermissionEdit.save()
POST    /crawlpermission/save               controllers.CrawlPermissionEdit.save()
POST    /organisationadminuser/             controllers.Organisations.admin()
POST    /roleadmin/                         controllers.RoleEdit.adminrole()
POST    /alphabeticalindex/filter-url       controllers.AlphabeticalIndex.filterUrl()
POST    /dispensationsites/filter-url       controllers.DispensationSites.filterUrl()
POST    /keysites/filter-url                controllers.KeySites.filterUrl()
POST    /urlsearch/filter-url               controllers.UrlSearch.filterUrl()
POST    /urlsnocrawl/filter-url             controllers.UrlsNoCrawl.filterUrl()
POST    /websites/filter-url                controllers.WebSites.filterUrl()

GET     /targets                            controllers.Targets.index()
POST    /targets/filter                     controllers.Targets.filterUrl()
POST    /targets/search          			controllers.Targets.search()
GET    	/targets/filterbyjson/:url			controllers.Targets.filterByJson(url)
GET    	/targets/list/                  	controllers.Targets.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /targets/lookup						controllers.Targets.lookup()
GET     /targets/new/:title      			controllers.Targets.create(title)
GET     /targets/:offset                    controllers.Targets.offset(offset:Int)


POST    /targets/add-new                    controllers.UrlSearch.addNewTarget()
GET     /website/:url                        controllers.WebSite.addEntry(url)
POST    /export/:curatorUrl/:organisationUrl/:collectionCategoryUrl/:subjectUrl/:crawlFrequency/:depth/:scope/:license/:filterUrl/:offset/:sorted   controllers.Targets.export(curatorUrl, organisationUrl, collectionCategoryUrl, subjectUrl, crawlFrequency, depth, scope, license, filterUrl, offset:Int, sorted:Boolean)

# Scope
GET     /api/scope/:url                      controllers.TargetController.isInScope(url)
GET     /api/licence/:url                    controllers.CrawlPermissionEdit.crawlPermissionExist(url)
GET     /api/licencelevel/:url               controllers.CrawlPermissionEdit.crawlPermissionExistAtHigherLevel(url)
GET     /api/licenceprompthigherlevel/:url   controllers.CrawlPermissionEdit.checkForHigherLevelPrompt(url)

