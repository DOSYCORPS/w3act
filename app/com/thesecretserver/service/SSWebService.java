
package com.thesecretserver.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * Webservice for standard integration.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "SSWebService", targetNamespace = "urn:thesecretserver.com", wsdlLocation = "https://blsps.ad.bl.uk/secretserver/webservices/sswebservice.asmx")
public class SSWebService
    extends Service
{

    private final static URL SSWEBSERVICE_WSDL_LOCATION;
    private final static WebServiceException SSWEBSERVICE_EXCEPTION;
    private final static QName SSWEBSERVICE_QNAME = new QName("urn:thesecretserver.com", "SSWebService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("https://blsps.ad.bl.uk/secretserver/webservices/sswebservice.asmx");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        SSWEBSERVICE_WSDL_LOCATION = url;
        SSWEBSERVICE_EXCEPTION = e;
    }

    public SSWebService() {
        super(__getWsdlLocation(), SSWEBSERVICE_QNAME);
    }

    public SSWebService(WebServiceFeature... features) {
        super(__getWsdlLocation(), SSWEBSERVICE_QNAME, features);
    }

    public SSWebService(URL wsdlLocation) {
        super(wsdlLocation, SSWEBSERVICE_QNAME);
    }

    public SSWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SSWEBSERVICE_QNAME, features);
    }

    public SSWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SSWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns SSWebServiceSoap
     */
    @WebEndpoint(name = "SSWebServiceSoap")
    public SSWebServiceSoap getSSWebServiceSoap() {
        return super.getPort(new QName("urn:thesecretserver.com", "SSWebServiceSoap"), SSWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SSWebServiceSoap
     */
    @WebEndpoint(name = "SSWebServiceSoap")
    public SSWebServiceSoap getSSWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("urn:thesecretserver.com", "SSWebServiceSoap"), SSWebServiceSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (SSWEBSERVICE_EXCEPTION!= null) {
            throw SSWEBSERVICE_EXCEPTION;
        }
        return SSWEBSERVICE_WSDL_LOCATION;
    }

}
